{"version":3,"sources":["logo.svg","fonts/SuperMario256.ttf","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","id","name","email","CardList","friends","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredfriends","this","filter","friend","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,mCCA3CD,EAAOC,QAAU,IAA0B,2C,mHCc5BC,G,YAZF,SAACC,GACb,OACC,yBAAKC,UAAU,yDACd,yBAAKC,IAAK,SAASC,IAAG,kDAA6CH,EAAMI,GAAnD,mBACtB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCMCC,EAXE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZC,EAAaD,EAAQE,KAAI,SAACC,EAAKC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAQI,GAAGR,GAAIA,GAAII,EAAQI,GAAGR,GAAIC,KAAMG,EAAQI,GAAGP,KAAMC,MAAOE,EAAQI,GAAGN,WAE9F,OACC,6BACEG,ICKWK,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKd,UAAU,OACd,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,yBACZC,SAAUH,MCCEI,EARA,SAACnB,GACf,OACC,yBAAKoB,MAAO,CAACC,SAAS,SAASC,OAAQ,kBAAkBC,OAAQ,UAC/DvB,EAAMwB,WCgCKC,E,YA9Bd,aAAc,IAAD,8BACZ,+CAWDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXzC,EAAKC,MAAQ,CACZxB,QAAS,GACTqB,YAAY,IAJD,E,iFAOO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACpB,QAAS6B,S,+BAKhC,IAAD,OACDC,EAAkBC,KAAKP,MAAMxB,QAAQgC,QAAO,SAAAC,GAAM,OACvDA,EAAOpC,KAAKqC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAC3D,OACI,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,aAAd,mBACA,kBAAC,EAAD,CAAWc,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,QAAS8B,U,GAxBZM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.61ef6e80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/SuperMario256.6c02f15f.ttf\";","import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className=\"tc back-color-cards dib br3 pa2 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt= \"robots\" src={`https://robohash.org/set_set5/bgset_bg1/${props.id}?size=300x300`}/>\n\t\t\t<div>\n\t\t\t\t<h3>{props.name}</h3>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\t\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({friends}) => {\n\tconst cardsArray = friends.map((user,i) => {\n\t\treturn <Card key={friends[i].id} id={friends[i].id} name={friends[i].name} email={friends[i].email}/> \n\t})\n\treturn (\n\t\t<div>\n\t\t\t{cardsArray}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \n\t\t\ttype=\"search\" \n\t\t\tplaceholder=\"search chebere friends\"\n\t\t\tonChange={searchChange} />\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{overflow:'scroll',border: '2px solid black',height: '500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardList from \"./CardList\";\nimport SearchBox from \"./SearchBox\";\nimport Scroll from './Scroll'\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tfriends: [],\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(response =>{ return response.json();})\n\t\t.then(users => {this.setState({friends: users})});\n\t}\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\trender(){\t \n\t\tconst filteredfriends = this.state.friends.filter(friend =>\n\t\t\tfriend.name.toLowerCase().includes(this.state.searchfield.toLowerCase()) );\n\t\treturn (\n\t    \t<div className=\"tc\">\n\t        \t<h1 className=\"MarioF f1\">Chebere friends</h1>\n\t        \t<SearchBox searchChange={this.onSearchChange}/>\n\t        \t<Scroll>\n\t        \t\t<CardList friends={filteredfriends}/>\n\t        \t</Scroll>\n\t    \t</div>    \n\t  \t);\n\t}  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport './fonts/SuperMario256.ttf';\n\n\nReactDOM.render(\n\t\t<App/>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}